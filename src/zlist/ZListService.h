/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp2/async/HeaderChannel.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/futures/Future.h>
#include "ZList_types.h"



namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

class ZListServiceSvAsyncIf {
 public:
  virtual ~ZListServiceSvAsyncIf() {}
  virtual void async_tm_getSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) = 0;
  virtual void async_getSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) = delete;
  virtual folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>> future_getSlice( ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) = 0;
  virtual void async_tm_rgetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) = 0;
  virtual void async_rgetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) = delete;
  virtual folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>> future_rgetSlice( ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) = 0;
  virtual void async_tm_multiGetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) = 0;
  virtual void async_multiGetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) = delete;
  virtual folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>> future_multiGetSlice(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) = 0;
  virtual void async_tm_rmultiGetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) = 0;
  virtual void async_rmultiGetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) = delete;
  virtual folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>> future_rmultiGetSlice(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) = 0;
  virtual void async_tm_checkExist(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = 0;
  virtual void async_checkExist(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = delete;
  virtual folly::Future<bool> future_checkExist( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = 0;
  virtual void async_tm_checkExists(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = 0;
  virtual void async_checkExists(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = delete;
  virtual folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>>> future_checkExists( ::zingme::zlist::thrift::cpp2::ZKey key, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = 0;
  virtual void async_tm_checkExists2(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys,  ::zingme::zlist::thrift::cpp2::ZValue value) = 0;
  virtual void async_checkExists2(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys,  ::zingme::zlist::thrift::cpp2::ZValue value) = delete;
  virtual folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>>> future_checkExists2(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys,  ::zingme::zlist::thrift::cpp2::ZValue value) = 0;
  virtual void async_tm_put(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = 0;
  virtual void async_put(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = delete;
  virtual folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>> future_put( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = 0;
  virtual void async_tm_multiPut(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = 0;
  virtual void async_multiPut(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = delete;
  virtual folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>> future_multiPut(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = 0;
  virtual void async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = 0;
  virtual void async_remove(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = delete;
  virtual folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>> future_remove( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) = 0;
  virtual void async_tm_removeKey(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key) = 0;
  virtual void async_removeKey(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key) = delete;
  virtual folly::Future<int32_t> future_removeKey( ::zingme::zlist::thrift::cpp2::ZKey key) = 0;
  virtual void async_tm_multiRemove(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = 0;
  virtual void async_multiRemove(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = delete;
  virtual folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>> future_multiRemove(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) = 0;
  virtual void async_tm_getStat(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, int32_t type) = 0;
  virtual void async_getStat(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, int32_t type) = delete;
  virtual folly::Future<std::unique_ptr<std::string>> future_getStat(int32_t type) = 0;
};

class ZListServiceAsyncProcessor;

class ZListServiceSvIf : public ZListServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef ZListServiceAsyncProcessor ProcessorType;

  virtual ~ZListServiceSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  virtual void getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, int32_t /*pos*/, int32_t /*count*/);
  folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>> future_getSlice( ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void async_tm_getSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, int32_t /*pos*/, int32_t /*count*/);
  folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>> future_rgetSlice( ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void async_tm_rgetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, int32_t /*pos*/, int32_t /*count*/);
  folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>> future_multiGetSlice(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count);
  virtual void async_tm_multiGetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count);
  virtual void rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, int32_t /*pos*/, int32_t /*count*/);
  folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>> future_rmultiGetSlice(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count);
  virtual void async_tm_rmultiGetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count);
  virtual bool checkExist( ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/);
  folly::Future<bool> future_checkExist( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void async_tm_checkExist(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/);
  folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>>> future_checkExists( ::zingme::zlist::thrift::cpp2::ZKey key, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values);
  virtual void async_tm_checkExists(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values);
  virtual void checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/);
  folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>>> future_checkExists2(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void async_tm_checkExists2(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void put( ::zingme::zlist::thrift::cpp2::ZCountResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/);
  folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>> future_put( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void async_tm_put(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/);
  folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>> future_multiPut(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values);
  virtual void async_tm_multiPut(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values);
  virtual void remove( ::zingme::zlist::thrift::cpp2::ZCountResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/);
  folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>> future_remove( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual int32_t removeKey( ::zingme::zlist::thrift::cpp2::ZKey /*key*/);
  folly::Future<int32_t> future_removeKey( ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual void async_tm_removeKey(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual void multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/);
  folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>> future_multiRemove(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values);
  virtual void async_tm_multiRemove(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values);
  virtual void getStat(std::string& /*_return*/, int32_t /*type*/);
  folly::Future<std::unique_ptr<std::string>> future_getStat(int32_t type);
  virtual void async_tm_getStat(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, int32_t type);
};

class ZListServiceSvNull : public ZListServiceSvIf {
 public:
  virtual ~ZListServiceSvNull() {}
  virtual void getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, int32_t /*pos*/, int32_t /*count*/);
  virtual void rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, int32_t /*pos*/, int32_t /*count*/);
  virtual void multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, int32_t /*pos*/, int32_t /*count*/);
  virtual void rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, int32_t /*pos*/, int32_t /*count*/);
  virtual bool checkExist( ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/);
  virtual void checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/);
  virtual void checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/);
  virtual void put( ::zingme::zlist::thrift::cpp2::ZCountResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/);
  virtual void multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/);
  virtual void remove( ::zingme::zlist::thrift::cpp2::ZCountResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/);
  virtual int32_t removeKey( ::zingme::zlist::thrift::cpp2::ZKey /*key*/);
  virtual void multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/);
  virtual void getStat(std::string& /*_return*/, int32_t /*type*/);
};

class ZListServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual const char* getServiceName();
  using BaseAsyncProcessor = void;
 protected:
  ZListServiceSvIf* iface_;
  virtual folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType);
 public:
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
 protected:
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods_;
  static std::unordered_map<std::string, int16_t> cacheKeyMap_;
 public:
  using BinaryProtocolProcessFunc = ProcessFunc<ZListServiceAsyncProcessor, apache::thrift::BinaryProtocolReader>;
  using BinaryProtocolProcessMap = ProcessMap<BinaryProtocolProcessFunc>;
  static const ZListServiceAsyncProcessor::BinaryProtocolProcessMap& getBinaryProtocolProcessMap();
 private:
  static ZListServiceAsyncProcessor::BinaryProtocolProcessMap binaryProcessMap_;
 public:
  using CompactProtocolProcessFunc = ProcessFunc<ZListServiceAsyncProcessor, apache::thrift::CompactProtocolReader>;
  using CompactProtocolProcessMap = ProcessMap<CompactProtocolProcessFunc>;
  static const ZListServiceAsyncProcessor::CompactProtocolProcessMap& getCompactProtocolProcessMap();
 private:
  static ZListServiceAsyncProcessor::CompactProtocolProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_getSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getSlice(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::zingme::zlist::thrift::cpp2::ZListResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_getSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_rgetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_rgetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_rgetSlice(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::zingme::zlist::thrift::cpp2::ZListResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_rgetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_rgetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_multiGetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_multiGetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_multiGetSlice(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_multiGetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_multiGetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_rmultiGetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_rmultiGetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_rmultiGetSlice(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_rmultiGetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_rmultiGetSlice(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_checkExist(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_checkExist(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_checkExist(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_checkExist(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_checkExist(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_checkExists(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_checkExists(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_checkExists(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_checkExists(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_checkExists(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_checkExists2(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_checkExists2(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_checkExists2(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_checkExists2(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_checkExists2(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_put(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_put(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_put(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::zingme::zlist::thrift::cpp2::ZCountResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_put(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_put(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_multiPut(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_multiPut(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_multiPut(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_multiPut(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_multiPut(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_remove(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_remove(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_remove(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::zingme::zlist::thrift::cpp2::ZCountResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_remove(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_remove(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_removeKey(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_removeKey(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_removeKey(int32_t protoSeqId, apache::thrift::ContextStack* ctx, int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_removeKey(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_removeKey(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_multiRemove(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_multiRemove(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_multiRemove(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_multiRemove(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_multiRemove(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_getStat(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getStat(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getStat(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_getStat(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getStat(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  ZListServiceAsyncProcessor(ZListServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~ZListServiceAsyncProcessor() {}
};

class ZListServiceAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual const char* getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, folly::DelayedDestruction::Destructor> channel_ptr;

  virtual ~ZListServiceAsyncClient() {}

  ZListServiceAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_.reset(new apache::thrift::Cpp2ConnContext);
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }

  apache::thrift::HeaderChannel*  getHeaderChannel() {
    return dynamic_cast<apache::thrift::HeaderChannel*>(this->channel_.get());
  }
  virtual void getSlice(std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void getSlice(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void sync_getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void sync_getSlice(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZListResult& _return,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual folly::Future< ::zingme::zlist::thrift::cpp2::ZListResult> future_getSlice( ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual folly::Future< ::zingme::zlist::thrift::cpp2::ZListResult> future_getSlice(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual folly::Future<std::pair< ::zingme::zlist::thrift::cpp2::ZListResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getSlice(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void getSlice(std::function<void (::apache::thrift::ClientReceiveState&&)> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  static folly::exception_wrapper recv_wrapped_getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void getSliceT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_getSliceT(Protocol_* prot,  ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_getSliceT(Protocol_* prot,  ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void rgetSlice(std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void rgetSlice(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void sync_rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void sync_rgetSlice(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZListResult& _return,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual folly::Future< ::zingme::zlist::thrift::cpp2::ZListResult> future_rgetSlice( ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual folly::Future< ::zingme::zlist::thrift::cpp2::ZListResult> future_rgetSlice(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual folly::Future<std::pair< ::zingme::zlist::thrift::cpp2::ZListResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_rgetSlice(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  virtual void rgetSlice(std::function<void (::apache::thrift::ClientReceiveState&&)> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  static folly::exception_wrapper recv_wrapped_rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void rgetSliceT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_rgetSliceT(Protocol_* prot,  ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_rgetSliceT(Protocol_* prot,  ::zingme::zlist::thrift::cpp2::ZListResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void multiGetSlice(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual void multiGetSlice(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual void sync_multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual void sync_multiGetSlice(apache::thrift::RpcOptions& rpcOptions, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>> future_multiGetSlice(const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>> future_multiGetSlice(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual folly::Future<std::pair<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_multiGetSlice(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual void multiGetSlice(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  static folly::exception_wrapper recv_wrapped_multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void multiGetSliceT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_multiGetSliceT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_multiGetSliceT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void rmultiGetSlice(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual void rmultiGetSlice(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual void sync_rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual void sync_rmultiGetSlice(apache::thrift::RpcOptions& rpcOptions, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>> future_rmultiGetSlice(const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>> future_rmultiGetSlice(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual folly::Future<std::pair<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_rmultiGetSlice(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  virtual void rmultiGetSlice(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  static folly::exception_wrapper recv_wrapped_rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void rmultiGetSliceT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, int32_t pos, int32_t count);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_rmultiGetSliceT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_rmultiGetSliceT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void checkExist(std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void checkExist(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual bool sync_checkExist( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual bool sync_checkExist(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future<bool> future_checkExist( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future<bool> future_checkExist(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_checkExist(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void checkExist(std::function<void (::apache::thrift::ClientReceiveState&&)> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  static folly::exception_wrapper recv_wrapped_checkExist(bool& _return, ::apache::thrift::ClientReceiveState& state);
  static bool recv_checkExist(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual bool recv_instance_checkExist(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_checkExist(bool& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void checkExistT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_checkExistT(Protocol_* prot, bool& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static bool recv_checkExistT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void checkExists(std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void checkExists(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void sync_checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return,  ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void sync_checkExists(apache::thrift::RpcOptions& rpcOptions, std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return,  ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>> future_checkExists( ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>> future_checkExists(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::pair<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_checkExists(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void checkExists(std::function<void (::apache::thrift::ClientReceiveState&&)> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  static folly::exception_wrapper recv_wrapped_checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void checkExistsT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_checkExistsT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_checkExistsT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void checkExists2(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void checkExists2(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void sync_checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void sync_checkExists2(apache::thrift::RpcOptions& rpcOptions, std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>> future_checkExists2(const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>> future_checkExists2(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future<std::pair<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_checkExists2(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void checkExists2(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  static folly::exception_wrapper recv_wrapped_checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void checkExists2T(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys,  ::zingme::zlist::thrift::cpp2::ZValue value);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_checkExists2T(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_checkExists2T(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void put(std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void put(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void sync_put( ::zingme::zlist::thrift::cpp2::ZCountResult& _return,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void sync_put(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZCountResult& _return,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future< ::zingme::zlist::thrift::cpp2::ZCountResult> future_put( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future< ::zingme::zlist::thrift::cpp2::ZCountResult> future_put(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future<std::pair< ::zingme::zlist::thrift::cpp2::ZCountResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_put(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void put(std::function<void (::apache::thrift::ClientReceiveState&&)> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  static folly::exception_wrapper recv_wrapped_put( ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_put( ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_put( ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_put( ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void putT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_putT(Protocol_* prot,  ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_putT(Protocol_* prot,  ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void multiPut(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void multiPut(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void sync_multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void sync_multiPut(apache::thrift::RpcOptions& rpcOptions, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>> future_multiPut(const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>> future_multiPut(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::pair<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_multiPut(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void multiPut(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  static folly::exception_wrapper recv_wrapped_multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void multiPutT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_multiPutT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_multiPutT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void remove(std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void remove(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void sync_remove( ::zingme::zlist::thrift::cpp2::ZCountResult& _return,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void sync_remove(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZCountResult& _return,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future< ::zingme::zlist::thrift::cpp2::ZCountResult> future_remove( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future< ::zingme::zlist::thrift::cpp2::ZCountResult> future_remove(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual folly::Future<std::pair< ::zingme::zlist::thrift::cpp2::ZCountResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_remove(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  virtual void remove(std::function<void (::apache::thrift::ClientReceiveState&&)> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  static folly::exception_wrapper recv_wrapped_remove( ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_remove( ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_remove( ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_remove( ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void removeT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_removeT(Protocol_* prot,  ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_removeT(Protocol_* prot,  ::zingme::zlist::thrift::cpp2::ZCountResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void removeKey(std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual void removeKey(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual int32_t sync_removeKey( ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual int32_t sync_removeKey(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual folly::Future<int32_t> future_removeKey( ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual folly::Future<int32_t> future_removeKey(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual folly::Future<std::pair<int32_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_removeKey(apache::thrift::RpcOptions& rpcOptions,  ::zingme::zlist::thrift::cpp2::ZKey key);
  virtual void removeKey(std::function<void (::apache::thrift::ClientReceiveState&&)> callback,  ::zingme::zlist::thrift::cpp2::ZKey key);
  static folly::exception_wrapper recv_wrapped_removeKey(int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  static int32_t recv_removeKey(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual int32_t recv_instance_removeKey(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_removeKey(int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void removeKeyT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback,  ::zingme::zlist::thrift::cpp2::ZKey key);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_removeKeyT(Protocol_* prot, int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static int32_t recv_removeKeyT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void multiRemove(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void multiRemove(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void sync_multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void sync_multiRemove(apache::thrift::RpcOptions& rpcOptions, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>> future_multiRemove(const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>> future_multiRemove(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual folly::Future<std::pair<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_multiRemove(apache::thrift::RpcOptions& rpcOptions, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  virtual void multiRemove(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  static folly::exception_wrapper recv_wrapped_multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void multiRemoveT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::vector< ::zingme::zlist::thrift::cpp2::ZKey>& keys, const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& values);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_multiRemoveT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_multiRemoveT(Protocol_* prot, std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void getStat(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t type);
  virtual void getStat(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t type);
  virtual void sync_getStat(std::string& _return, int32_t type);
  virtual void sync_getStat(apache::thrift::RpcOptions& rpcOptions, std::string& _return, int32_t type);
  virtual folly::Future<std::string> future_getStat(int32_t type);
  virtual folly::Future<std::string> future_getStat(apache::thrift::RpcOptions& rpcOptions, int32_t type);
  virtual folly::Future<std::pair<std::string, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getStat(apache::thrift::RpcOptions& rpcOptions, int32_t type);
  virtual void getStat(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t type);
  static folly::exception_wrapper recv_wrapped_getStat(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getStat(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getStat(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getStat(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void getStatT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t type);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_getStatT(Protocol_* prot, std::string& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_getStatT(Protocol_* prot, std::string& _return, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::Cpp2ConnContext> connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

}}}} // zingme::zlist::thrift::cpp2
namespace apache { namespace thrift {

}} // apache::thrift