/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ZList_types.h"

#include "ZList_types.tcc"

#include <algorithm>

namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

template uint32_t ZListItem::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ZListItem::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZListItem::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZListItem::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZListItem::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ZListItem::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ZListItem::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ZListItem::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void ZListItem::__clear() {
  count = 0;
  values.clear();
  __isset.__clear();
}

bool ZListItem::operator==(const ZListItem& rhs) const {
  if (!((count == rhs.count))) {
    return false;
  }
  if (!((values == rhs.values))) {
    return false;
  }
  return true;
}

const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& ZListItem::get_values() const& {
  return values;
}

std::vector< ::zingme::zlist::thrift::cpp2::ZValue> ZListItem::get_values() && {
  return std::move(values);
}

void swap(ZListItem& a, ZListItem& b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.values, b.values);
  swap(a.__isset, b.__isset);
}

}}}} // zingme::zlist::thrift::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

template uint32_t ZListResult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ZListResult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZListResult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZListResult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZListResult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ZListResult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ZListResult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ZListResult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void ZListResult::__clear() {
  error = 0;
  count = 0;
  data.clear();
  __isset.__clear();
}

bool ZListResult::operator==(const ZListResult& rhs) const {
  if (!((error == rhs.error))) {
    return false;
  }
  if (!((count == rhs.count))) {
    return false;
  }
  if (!((data == rhs.data))) {
    return false;
  }
  return true;
}

const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& ZListResult::get_data() const& {
  return data;
}

std::vector< ::zingme::zlist::thrift::cpp2::ZValue> ZListResult::get_data() && {
  return std::move(data);
}

void swap(ZListResult& a, ZListResult& b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.count, b.count);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

}}}} // zingme::zlist::thrift::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

template uint32_t ZCountResult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ZCountResult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZCountResult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZCountResult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ZCountResult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ZCountResult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ZCountResult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ZCountResult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void ZCountResult::__clear() {
  error = 0;
  count = 0;
  __isset.__clear();
}

bool ZCountResult::operator==(const ZCountResult& rhs) const {
  if (!((error == rhs.error))) {
    return false;
  }
  if (!((count == rhs.count))) {
    return false;
  }
  return true;
}

void swap(ZCountResult& a, ZCountResult& b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

}}}} // zingme::zlist::thrift::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

}}}} // zingme::zlist::thrift::cpp2