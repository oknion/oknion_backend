/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ZListService.h"

#include "ZListService.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

std::unique_ptr<apache::thrift::AsyncProcessor> ZListServiceSvIf::getProcessor() {
  return folly::make_unique<ZListServiceAsyncProcessor>(this);
}

void ZListServiceSvIf::getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, int32_t /*pos*/, int32_t /*count*/) {
  throw apache::thrift::TApplicationException("Function getSlice is unimplemented");
}

folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>> ZListServiceSvIf::future_getSlice( ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::zingme::zlist::thrift::cpp2::ZListResult& _return) { getSlice(_return, key, pos, count); });
}

void ZListServiceSvIf::async_tm_getSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_getSlice(key, pos, count); });
}

void ZListServiceSvIf::rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, int32_t /*pos*/, int32_t /*count*/) {
  throw apache::thrift::TApplicationException("Function rgetSlice is unimplemented");
}

folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>> ZListServiceSvIf::future_rgetSlice( ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::zingme::zlist::thrift::cpp2::ZListResult& _return) { rgetSlice(_return, key, pos, count); });
}

void ZListServiceSvIf::async_tm_rgetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZListResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, int32_t pos, int32_t count) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_rgetSlice(key, pos, count); });
}

void ZListServiceSvIf::multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, int32_t /*pos*/, int32_t /*count*/) {
  throw apache::thrift::TApplicationException("Function multiGetSlice is unimplemented");
}

folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>> ZListServiceSvIf::future_multiGetSlice(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return) { multiGetSlice(_return, std::move(keys), pos, count); });
}

void ZListServiceSvIf::async_tm_multiGetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_multiGetSlice(std::move(keys), pos, count); });
}

void ZListServiceSvIf::rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, int32_t /*pos*/, int32_t /*count*/) {
  throw apache::thrift::TApplicationException("Function rmultiGetSlice is unimplemented");
}

folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>> ZListServiceSvIf::future_rmultiGetSlice(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& _return) { rmultiGetSlice(_return, std::move(keys), pos, count); });
}

void ZListServiceSvIf::async_tm_rmultiGetSlice(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, int32_t pos, int32_t count) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_rmultiGetSlice(std::move(keys), pos, count); });
}

bool ZListServiceSvIf::checkExist( ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/) {
  throw apache::thrift::TApplicationException("Function checkExist is unimplemented");
}

folly::Future<bool> ZListServiceSvIf::future_checkExist( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) {
  return apache::thrift::detail::si::future([&] { return checkExist(key, value); });
}

void ZListServiceSvIf::async_tm_checkExist(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_checkExist(key, value); });
}

void ZListServiceSvIf::checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/) {
  throw apache::thrift::TApplicationException("Function checkExists is unimplemented");
}

folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>>> ZListServiceSvIf::future_checkExists( ::zingme::zlist::thrift::cpp2::ZKey key, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& _return) { checkExists(_return, key, std::move(values)); });
}

void ZListServiceSvIf::async_tm_checkExists(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_checkExists(key, std::move(values)); });
}

void ZListServiceSvIf::checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/) {
  throw apache::thrift::TApplicationException("Function checkExists2 is unimplemented");
}

folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>>> ZListServiceSvIf::future_checkExists2(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys,  ::zingme::zlist::thrift::cpp2::ZValue value) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& _return) { checkExists2(_return, std::move(keys), value); });
}

void ZListServiceSvIf::async_tm_checkExists2(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys,  ::zingme::zlist::thrift::cpp2::ZValue value) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_checkExists2(std::move(keys), value); });
}

void ZListServiceSvIf::put( ::zingme::zlist::thrift::cpp2::ZCountResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/) {
  throw apache::thrift::TApplicationException("Function put is unimplemented");
}

folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>> ZListServiceSvIf::future_put( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::zingme::zlist::thrift::cpp2::ZCountResult& _return) { put(_return, key, value); });
}

void ZListServiceSvIf::async_tm_put(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_put(key, value); });
}

void ZListServiceSvIf::multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/) {
  throw apache::thrift::TApplicationException("Function multiPut is unimplemented");
}

folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>> ZListServiceSvIf::future_multiPut(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return) { multiPut(_return, std::move(keys), std::move(values)); });
}

void ZListServiceSvIf::async_tm_multiPut(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_multiPut(std::move(keys), std::move(values)); });
}

void ZListServiceSvIf::remove( ::zingme::zlist::thrift::cpp2::ZCountResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/) {
  throw apache::thrift::TApplicationException("Function remove is unimplemented");
}

folly::Future<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>> ZListServiceSvIf::future_remove( ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::zingme::zlist::thrift::cpp2::ZCountResult& _return) { remove(_return, key, value); });
}

void ZListServiceSvIf::async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::zingme::zlist::thrift::cpp2::ZCountResult>>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key,  ::zingme::zlist::thrift::cpp2::ZValue value) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_remove(key, value); });
}

int32_t ZListServiceSvIf::removeKey( ::zingme::zlist::thrift::cpp2::ZKey /*key*/) {
  throw apache::thrift::TApplicationException("Function removeKey is unimplemented");
}

folly::Future<int32_t> ZListServiceSvIf::future_removeKey( ::zingme::zlist::thrift::cpp2::ZKey key) {
  return apache::thrift::detail::si::future([&] { return removeKey(key); });
}

void ZListServiceSvIf::async_tm_removeKey(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback,  ::zingme::zlist::thrift::cpp2::ZKey key) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_removeKey(key); });
}

void ZListServiceSvIf::multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/) {
  throw apache::thrift::TApplicationException("Function multiRemove is unimplemented");
}

folly::Future<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>> ZListServiceSvIf::future_multiRemove(std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& _return) { multiRemove(_return, std::move(keys), std::move(values)); });
}

void ZListServiceSvIf::async_tm_multiRemove(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>>>> callback, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> keys, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> values) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_multiRemove(std::move(keys), std::move(values)); });
}

void ZListServiceSvIf::getStat(std::string& /*_return*/, int32_t /*type*/) {
  throw apache::thrift::TApplicationException("Function getStat is unimplemented");
}

folly::Future<std::unique_ptr<std::string>> ZListServiceSvIf::future_getStat(int32_t type) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::string& _return) { getStat(_return, type); });
}

void ZListServiceSvIf::async_tm_getStat(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, int32_t type) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_getStat(type); });
}

void ZListServiceSvNull::getSlice( ::zingme::zlist::thrift::cpp2::ZListResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, int32_t /*pos*/, int32_t /*count*/) {}

void ZListServiceSvNull::rgetSlice( ::zingme::zlist::thrift::cpp2::ZListResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, int32_t /*pos*/, int32_t /*count*/) {}

void ZListServiceSvNull::multiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, int32_t /*pos*/, int32_t /*count*/) {}

void ZListServiceSvNull::rmultiGetSlice(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZListResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, int32_t /*pos*/, int32_t /*count*/) {}

bool ZListServiceSvNull::checkExist( ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/) {
  return 0;
}

void ZListServiceSvNull::checkExists(std::map< ::zingme::zlist::thrift::cpp2::ZValue, bool>& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/) {}

void ZListServiceSvNull::checkExists2(std::map< ::zingme::zlist::thrift::cpp2::ZKey, bool>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/) {}

void ZListServiceSvNull::put( ::zingme::zlist::thrift::cpp2::ZCountResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/) {}

void ZListServiceSvNull::multiPut(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/) {}

void ZListServiceSvNull::remove( ::zingme::zlist::thrift::cpp2::ZCountResult& /*_return*/,  ::zingme::zlist::thrift::cpp2::ZKey /*key*/,  ::zingme::zlist::thrift::cpp2::ZValue /*value*/) {}

int32_t ZListServiceSvNull::removeKey( ::zingme::zlist::thrift::cpp2::ZKey /*key*/) {
  return 0;
}

void ZListServiceSvNull::multiRemove(std::map< ::zingme::zlist::thrift::cpp2::ZKey,  ::zingme::zlist::thrift::cpp2::ZCountResult>& /*_return*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZKey>> /*keys*/, std::unique_ptr<std::vector< ::zingme::zlist::thrift::cpp2::ZValue>> /*values*/) {}

void ZListServiceSvNull::getStat(std::string& /*_return*/, int32_t /*type*/) {}

const char* ZListServiceAsyncProcessor::getServiceName() {
  return "ZListService";
}

folly::Optional<std::string> ZListServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void ZListServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool ZListServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> ZListServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> ZListServiceAsyncProcessor::cacheKeyMap_ {};
const ZListServiceAsyncProcessor::BinaryProtocolProcessMap& ZListServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

ZListServiceAsyncProcessor::BinaryProtocolProcessMap ZListServiceAsyncProcessor::binaryProcessMap_ {
  {"getSlice", &ZListServiceAsyncProcessor::_processInThread_getSlice<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"rgetSlice", &ZListServiceAsyncProcessor::_processInThread_rgetSlice<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"multiGetSlice", &ZListServiceAsyncProcessor::_processInThread_multiGetSlice<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"rmultiGetSlice", &ZListServiceAsyncProcessor::_processInThread_rmultiGetSlice<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"checkExist", &ZListServiceAsyncProcessor::_processInThread_checkExist<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"checkExists", &ZListServiceAsyncProcessor::_processInThread_checkExists<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"checkExists2", &ZListServiceAsyncProcessor::_processInThread_checkExists2<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"put", &ZListServiceAsyncProcessor::_processInThread_put<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"multiPut", &ZListServiceAsyncProcessor::_processInThread_multiPut<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"remove", &ZListServiceAsyncProcessor::_processInThread_remove<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"removeKey", &ZListServiceAsyncProcessor::_processInThread_removeKey<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"multiRemove", &ZListServiceAsyncProcessor::_processInThread_multiRemove<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getStat", &ZListServiceAsyncProcessor::_processInThread_getStat<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
const ZListServiceAsyncProcessor::CompactProtocolProcessMap& ZListServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

ZListServiceAsyncProcessor::CompactProtocolProcessMap ZListServiceAsyncProcessor::compactProcessMap_ {
  {"getSlice", &ZListServiceAsyncProcessor::_processInThread_getSlice<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"rgetSlice", &ZListServiceAsyncProcessor::_processInThread_rgetSlice<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"multiGetSlice", &ZListServiceAsyncProcessor::_processInThread_multiGetSlice<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"rmultiGetSlice", &ZListServiceAsyncProcessor::_processInThread_rmultiGetSlice<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"checkExist", &ZListServiceAsyncProcessor::_processInThread_checkExist<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"checkExists", &ZListServiceAsyncProcessor::_processInThread_checkExists<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"checkExists2", &ZListServiceAsyncProcessor::_processInThread_checkExists2<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"put", &ZListServiceAsyncProcessor::_processInThread_put<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"multiPut", &ZListServiceAsyncProcessor::_processInThread_multiPut<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"remove", &ZListServiceAsyncProcessor::_processInThread_remove<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"removeKey", &ZListServiceAsyncProcessor::_processInThread_removeKey<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"multiRemove", &ZListServiceAsyncProcessor::_processInThread_multiRemove<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getStat", &ZListServiceAsyncProcessor::_processInThread_getStat<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};

}}}} // zingme::zlist::thrift::cpp2
namespace apache { namespace thrift {

}} // apache::thrift