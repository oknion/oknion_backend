/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>
#include <boost/operators.hpp>




namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

class ZListItem;
class ZListResult;
class ZCountResult;
typedef int32_t ZKey;

typedef int32_t ZValue;

class ZListItem : private boost::totally_ordered<ZListItem> {
 public:

  ZListItem() :
      count(0) {}
  // FragileConstructor for use in initialization lists only

  ZListItem(apache::thrift::FragileConstructor, int32_t count__arg, std::vector< ::zingme::zlist::thrift::cpp2::ZValue> values__arg) :
      count(std::move(count__arg)),
      values(std::move(values__arg)) {
    __isset.count = true;
    __isset.values = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ZListItem(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ZListItem(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    count = arg.move();
    __isset.count = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ZListItem(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ZListItem(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    values = arg.move();
    __isset.values = true;
  }

  ZListItem(ZListItem&&) = default;

  ZListItem(const ZListItem&) = default;

  ZListItem& operator=(ZListItem&&) = default;

  ZListItem& operator=(const ZListItem&) = default;
  void __clear();

  virtual ~ZListItem() throw() {}

  int32_t count;
  std::vector< ::zingme::zlist::thrift::cpp2::ZValue> values;

  struct __isset {
    void __clear() {
      count = false;
      values = false;
    }

    bool count = false;
    bool values = false;
  } __isset;
  bool operator==(const ZListItem& rhs) const;
  bool operator < (const ZListItem& rhs) const;

  int32_t get_count() const {
    return count;
  }

  int32_t& set_count(int32_t count_) {
    count = count_;
    __isset.count = true;
    return count;
  }
  const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& get_values() const&;
  std::vector< ::zingme::zlist::thrift::cpp2::ZValue> get_values() &&;
  template <typename T_ZListItem_values_struct_setter>
  std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& set_values(T_ZListItem_values_struct_setter&& values_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(ZListItem& a, ZListItem& b);

}}}} // zingme::zlist::thrift::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListItem>::clear( ::zingme::zlist::thrift::cpp2::ZListItem* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListItem>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListItem>::write(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZListItem* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListItem>::read(Protocol* proto,   ::zingme::zlist::thrift::cpp2::ZListItem* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListItem>::serializedSize(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZListItem* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListItem>::serializedSizeZC(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZListItem* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

class ZListResult : private boost::totally_ordered<ZListResult> {
 public:

  ZListResult() :
      error(0),
      count(0) {}
  // FragileConstructor for use in initialization lists only

  ZListResult(apache::thrift::FragileConstructor, int32_t error__arg, int32_t count__arg, std::vector< ::zingme::zlist::thrift::cpp2::ZValue> data__arg) :
      error(std::move(error__arg)),
      count(std::move(count__arg)),
      data(std::move(data__arg)) {
    __isset.error = true;
    __isset.count = true;
    __isset.data = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ZListResult(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ZListResult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    error = arg.move();
    __isset.error = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ZListResult(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ZListResult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    count = arg.move();
    __isset.count = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ZListResult(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ZListResult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    data = arg.move();
    __isset.data = true;
  }

  ZListResult(ZListResult&&) = default;

  ZListResult(const ZListResult&) = default;

  ZListResult& operator=(ZListResult&&) = default;

  ZListResult& operator=(const ZListResult&) = default;
  void __clear();

  virtual ~ZListResult() throw() {}

  int32_t error;
  int32_t count;
  std::vector< ::zingme::zlist::thrift::cpp2::ZValue> data;

  struct __isset {
    void __clear() {
      error = false;
      count = false;
      data = false;
    }

    bool error = false;
    bool count = false;
    bool data = false;
  } __isset;
  bool operator==(const ZListResult& rhs) const;
  bool operator < (const ZListResult& rhs) const;

  int32_t get_error() const {
    return error;
  }

  int32_t& set_error(int32_t error_) {
    error = error_;
    __isset.error = true;
    return error;
  }

  int32_t get_count() const {
    return count;
  }

  int32_t& set_count(int32_t count_) {
    count = count_;
    __isset.count = true;
    return count;
  }
  const std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& get_data() const&;
  std::vector< ::zingme::zlist::thrift::cpp2::ZValue> get_data() &&;
  template <typename T_ZListResult_data_struct_setter>
  std::vector< ::zingme::zlist::thrift::cpp2::ZValue>& set_data(T_ZListResult_data_struct_setter&& data_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(ZListResult& a, ZListResult& b);

}}}} // zingme::zlist::thrift::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListResult>::clear( ::zingme::zlist::thrift::cpp2::ZListResult* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListResult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListResult>::write(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZListResult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListResult>::read(Protocol* proto,   ::zingme::zlist::thrift::cpp2::ZListResult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListResult>::serializedSize(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZListResult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZListResult>::serializedSizeZC(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZListResult* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

class ZCountResult : private boost::totally_ordered<ZCountResult> {
 public:

  ZCountResult() :
      error(0),
      count(0) {}
  // FragileConstructor for use in initialization lists only

  ZCountResult(apache::thrift::FragileConstructor, int32_t error__arg, int32_t count__arg) :
      error(std::move(error__arg)),
      count(std::move(count__arg)) {
    __isset.error = true;
    __isset.count = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ZCountResult(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ZCountResult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    error = arg.move();
    __isset.error = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ZCountResult(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ZCountResult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    count = arg.move();
    __isset.count = true;
  }

  ZCountResult(ZCountResult&&) = default;

  ZCountResult(const ZCountResult&) = default;

  ZCountResult& operator=(ZCountResult&&) = default;

  ZCountResult& operator=(const ZCountResult&) = default;
  void __clear();

  virtual ~ZCountResult() throw() {}

  int32_t error;
  int32_t count;

  struct __isset {
    void __clear() {
      error = false;
      count = false;
    }

    bool error = false;
    bool count = false;
  } __isset;
  bool operator==(const ZCountResult& rhs) const;

  bool operator < (const ZCountResult& rhs) const {
    if (!(error == rhs.error)) {
      return error < rhs.error;
    }
    if (!(count == rhs.count)) {
      return count < rhs.count;
    }
    return false;
  }

  int32_t get_error() const {
    return error;
  }

  int32_t& set_error(int32_t error_) {
    error = error_;
    __isset.error = true;
    return error;
  }

  int32_t get_count() const {
    return count;
  }

  int32_t& set_count(int32_t count_) {
    count = count_;
    __isset.count = true;
    return count;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(ZCountResult& a, ZCountResult& b);

}}}} // zingme::zlist::thrift::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZCountResult>::clear( ::zingme::zlist::thrift::cpp2::ZCountResult* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZCountResult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZCountResult>::write(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZCountResult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZCountResult>::read(Protocol* proto,   ::zingme::zlist::thrift::cpp2::ZCountResult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZCountResult>::serializedSize(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZCountResult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::zingme::zlist::thrift::cpp2::ZCountResult>::serializedSizeZC(Protocol* proto, const  ::zingme::zlist::thrift::cpp2::ZCountResult* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace zingme { namespace zlist { namespace thrift { namespace cpp2 {

}}}} // zingme::zlist::thrift::cpp2